package mylib;

import java.util.Properties;
import jakarta.mail.*;
import jakarta.mail.internet.*;

/**
 * EmailService - G·ª≠i email OTP cho ch·ª©c nƒÉng qu√™n m·∫≠t kh·∫©u
 */
public class EmailService {

    private static final String SMTP_HOST = "smtp.gmail.com";
    private static final String SMTP_PORT = "587";
    private static final String EMAIL_FROM = "evbatteryswap.system@gmail.com";
    
    // ‚úÖ App Password ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t (EV Battery Swap System)
    // T·∫°o ng√†y: 18/10/2025
    // L∆∞u √Ω: KH√îNG share m·∫≠t kh·∫©u n√†y cho ng∆∞·ªùi kh√°c!
    private static final String EMAIL_PASSWORD = "mzqbrzycduxhvbnr"; // Gmail App Password (16 k√Ω t·ª±, kh√¥ng d·∫•u c√°ch)

    /**
     * G·ª≠i OTP qua email
     * @param toEmail Email ng∆∞·ªùi nh·∫≠n
     * @param otp M√£ OTP 6 ch·ªØ s·ªë
     * @return true n·∫øu g·ª≠i th√†nh c√¥ng, false n·∫øu th·∫•t b·∫°i
     */
    public static boolean sendOtpEmail(String toEmail, String otp) {
        System.out.println("\n[EmailService] ========================================");
        System.out.println("[EmailService] === STARTING EMAIL SEND PROCESS ===");
        System.out.println("[EmailService] ========================================");
        System.out.println("[EmailService] To: " + toEmail);
        System.out.println("[EmailService] OTP: " + otp);
        System.out.println("[EmailService] From: " + EMAIL_FROM);
        
        // C·∫•u h√¨nh SMTP v·ªõi ƒë·∫ßy ƒë·ªß options
        Properties props = new Properties();
        
        // Authentication
        props.put("mail.smtp.auth", "true");
        
        // TLS/SSL Settings
        props.put("mail.smtp.starttls.enable", "true");
        props.put("mail.smtp.starttls.required", "true");
        props.put("mail.smtp.ssl.protocols", "TLSv1.2 TLSv1.3");
        props.put("mail.smtp.ssl.trust", SMTP_HOST);
        
        // Server settings
        props.put("mail.smtp.host", SMTP_HOST);
        props.put("mail.smtp.port", SMTP_PORT);
        
        // Timeout settings (quan tr·ªçng!)
        props.put("mail.smtp.connectiontimeout", "10000"); // 10 seconds
        props.put("mail.smtp.timeout", "10000"); // 10 seconds
        props.put("mail.smtp.writetimeout", "10000"); // 10 seconds
        
        // TLS settings - FIX cho Java 8 kh√¥ng h·ªó tr·ª£ TLSv1.3
        props.put("mail.smtp.ssl.protocols", "TLSv1.2");
        props.put("mail.smtp.ssl.trust", SMTP_HOST);
        
        // Debug mode - b·∫≠t ƒë·ªÉ xem chi ti·∫øt l·ªói
        props.put("mail.debug", "true");
        
        System.out.println("[EmailService] SMTP Host: " + SMTP_HOST);
        System.out.println("[EmailService] SMTP Port: " + SMTP_PORT);
        System.out.println("[EmailService] TLS Enabled: true");
        System.out.println("[EmailService] Authentication: true");

        try {
            // T·∫°o session v·ªõi authentication
            Session session = Session.getInstance(props, new Authenticator() {
                @Override
                protected PasswordAuthentication getPasswordAuthentication() {
                    System.out.println("[EmailService] üîê Authenticating with: " + EMAIL_FROM);
                    return new PasswordAuthentication(EMAIL_FROM, EMAIL_PASSWORD);
                }
            });
            
            // B·∫≠t debug mode cho session
            session.setDebug(true);

            System.out.println("[EmailService] üìù Creating email message...");
            
            // T·∫°o message v·ªõi encoding UTF-8
            MimeMessage message = new MimeMessage(session);
            message.setFrom(new InternetAddress(EMAIL_FROM, "EV Battery Swap System", "UTF-8"));
            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(toEmail));
            message.setSubject("M√£ OTP ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u - EV Battery Swap", "UTF-8");

            // N·ªôi dung email v·ªõi HTML v√† UTF-8
            String emailContent = "<!DOCTYPE html>"
                    + "<html>"
                    + "<head>"
                    + "<meta charset=\"UTF-8\">"
                    + "</head>"
                    + "<body style=\"font-family: Arial, sans-serif; line-height: 1.6; color: #333;\">"
                    + "<div style=\"max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #ddd; border-radius: 10px;\">"
                    + "<h2 style=\"color: #4CAF50; text-align: center;\">üîê M√£ OTP ƒê·∫∑t L·∫°i M·∫≠t Kh·∫©u</h2>"
                    + "<p>Xin ch√†o,</p>"
                    + "<p>B·∫°n ƒë√£ y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n <strong>EV Battery Swap</strong>.</p>"
                    + "<div style=\"background-color: #f4f4f4; padding: 20px; border-radius: 5px; text-align: center; margin: 20px 0;\">"
                    + "<h1 style=\"color: #4CAF50; margin: 0; font-size: 32px; letter-spacing: 5px;\">" + otp + "</h1>"
                    + "<p style=\"margin: 10px 0 0 0; color: #666;\">M√£ OTP c·ªßa b·∫°n</p>"
                    + "</div>"
                    + "<p style=\"color: #d32f2f;\">‚è∞ <strong>L∆∞u √Ω:</strong> M√£ OTP c√≥ hi·ªáu l·ª±c trong <strong>5 ph√∫t</strong>.</p>"
                    + "<p>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y.</p>"
                    + "<hr style=\"border: none; border-top: 1px solid #ddd; margin: 20px 0;\">"
                    + "<p style=\"text-align: center; color: #666; font-size: 12px;\">"
                    + "Tr√¢n tr·ªçng,<br>"
                    + "<strong>EV Battery Swap System</strong>"
                    + "</p>"
                    + "</div>"
                    + "</body>"
                    + "</html>";
            
            // Set content type l√† HTML v·ªõi UTF-8
            message.setContent(emailContent, "text/html; charset=UTF-8");
            message.saveChanges();
            
            System.out.println("[EmailService] üìß Message created successfully");
            System.out.println("[EmailService] üöÄ Sending email...");

            // G·ª≠i email
            Transport.send(message);

            System.out.println("[EmailService] ========================================");
            System.out.println("[EmailService] ‚úÖ‚úÖ‚úÖ EMAIL SENT SUCCESSFULLY! ‚úÖ‚úÖ‚úÖ");
            System.out.println("[EmailService] ========================================");
            System.out.println("[EmailService] Recipient: " + toEmail);
            System.out.println("[EmailService] OTP: " + otp);
            System.out.println("[EmailService] ========================================\n");
            
            return true;

        } catch (AuthenticationFailedException e) {
            System.err.println("\n[EmailService] ========================================");
            System.err.println("[EmailService] ‚ùå AUTHENTICATION FAILED!");
            System.err.println("[EmailService] ========================================");
            System.err.println("[EmailService] Error: " + e.getMessage());
            System.err.println("[EmailService] ");
            System.err.println("[EmailService] üîß H∆Ø·ªöNG D·∫™N KH·∫ÆC PH·ª§C:");
            System.err.println("[EmailService] 1. Ki·ªÉm tra email v√† m·∫≠t kh·∫©u c√≥ ƒë√∫ng kh√¥ng");
            System.err.println("[EmailService] 2. T·∫°o App Password m·ªõi t·∫°i:");
            System.err.println("[EmailService]    https://myaccount.google.com/apppasswords");
            System.err.println("[EmailService] 3. ƒê·∫£m b·∫£o ƒë√£ b·∫≠t 2-Step Verification");
            System.err.println("[EmailService] 4. C·∫≠p nh·∫≠t EMAIL_PASSWORD trong EmailService.java");
            System.err.println("[EmailService] ========================================\n");
            e.printStackTrace();
            return false;
            
        } catch (MessagingException e) {
            System.err.println("\n[EmailService] ========================================");
            System.err.println("[EmailService] ‚ùå MESSAGING ERROR!");
            System.err.println("[EmailService] ========================================");
            System.err.println("[EmailService] Error Type: " + e.getClass().getSimpleName());
            System.err.println("[EmailService] Error Message: " + e.getMessage());
            System.err.println("[EmailService] ");
            System.err.println("[EmailService] üîß H∆Ø·ªöNG D·∫™N KH·∫ÆC PH·ª§C:");
            System.err.println("[EmailService] 1. Ki·ªÉm tra k·∫øt n·ªëi Internet");
            System.err.println("[EmailService] 2. Ki·ªÉm tra Firewall/Antivirus c√≥ block port 587 kh√¥ng");
            System.err.println("[EmailService] 3. Th·ª≠ t·∫Øt VPN n·∫øu ƒëang d√πng");
            System.err.println("[EmailService] 4. Ki·ªÉm tra email ng∆∞·ªùi nh·∫≠n c√≥ h·ª£p l·ªá kh√¥ng");
            System.err.println("[EmailService] ========================================\n");
            e.printStackTrace();
            return false;
            
        } catch (Exception e) {
            System.err.println("\n[EmailService] ========================================");
            System.err.println("[EmailService] ‚ùå UNEXPECTED ERROR!");
            System.err.println("[EmailService] ========================================");
            System.err.println("[EmailService] Error Type: " + e.getClass().getSimpleName());
            System.err.println("[EmailService] Error Message: " + e.getMessage());
            System.err.println("[EmailService] ========================================\n");
            e.printStackTrace();
            return false;
        }
    }
    
    /**
     * G·ª≠i OTP ƒëƒÉng k√Ω t√†i kho·∫£n
     * @param toEmail Email ng∆∞·ªùi nh·∫≠n
     * @param otp M√£ OTP
     * @return true n·∫øu g·ª≠i th√†nh c√¥ng, false n·∫øu th·∫•t b·∫°i
     */
    public boolean sendRegistrationOTP(String toEmail, String otp) {
        try {
            System.out.println("\n[EmailService] ========================================");
            System.out.println("[EmailService] üìß SENDING REGISTRATION OTP EMAIL");
            System.out.println("[EmailService] ========================================");
            System.out.println("[EmailService] To: " + toEmail);
            System.out.println("[EmailService] OTP: " + otp);
            System.out.println("[EmailService] SMTP Server: " + SMTP_HOST + ":" + SMTP_PORT);
            System.out.println("[EmailService] ========================================\n");

            Properties props = new Properties();
            props.put("mail.smtp.auth", "true");
            props.put("mail.smtp.starttls.enable", "true");
            props.put("mail.smtp.host", SMTP_HOST);
            props.put("mail.smtp.port", SMTP_PORT);
            
            // Fix TLS version for Java 8
            props.put("mail.smtp.ssl.protocols", "TLSv1.2");
            props.put("mail.smtp.ssl.trust", SMTP_HOST);

            System.out.println("[EmailService] üîß Creating session...");
            Session session = Session.getInstance(props, new Authenticator() {
                @Override
                protected PasswordAuthentication getPasswordAuthentication() {
                    return new PasswordAuthentication(EMAIL_FROM, EMAIL_PASSWORD);
                }
            });

            System.out.println("[EmailService] ‚úÖ Session created");
            System.out.println("[EmailService] üìù Creating message...");

            Message message = new MimeMessage(session);
            message.setFrom(new InternetAddress(EMAIL_FROM, "EV Battery Swap System"));
            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(toEmail));
            
            // Fix: Jakarta Mail setSubject ch·ªâ nh·∫≠n 1 tham s·ªë
            MimeMessage mimeMsg = (MimeMessage) message;
            mimeMsg.setSubject("X√°c th·ª±c ƒëƒÉng k√Ω t√†i kho·∫£n - EV Battery Swap", "UTF-8");

            String emailContent = "<!DOCTYPE html>"
                    + "<html>"
                    + "<head>"
                    + "<meta charset='UTF-8'>"
                    + "</head>"
                    + "<body style='font-family: Arial, sans-serif; line-height: 1.6; color: #333;'>"
                    + "<div style='max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f9f9f9; border-radius: 10px;'>"
                    + "<h2 style='color: #2196F3; text-align: center;'>üîê X√°c th·ª±c ƒëƒÉng k√Ω t√†i kho·∫£n</h2>"
                    + "<div style='background-color: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);'>"
                    + "<p style='font-size: 16px;'>Xin ch√†o,</p>"
                    + "<p style='font-size: 16px;'>B·∫°n ƒë√£ y√™u c·∫ßu ƒëƒÉng k√Ω t√†i kho·∫£n t·∫°i <strong>EV Battery Swap System</strong>.</p>"
                    + "<p style='font-size: 16px;'>Vui l√≤ng s·ª≠ d·ª•ng m√£ OTP d∆∞·ªõi ƒë√¢y ƒë·ªÉ x√°c th·ª±c email c·ªßa b·∫°n:</p>"
                    + "<div style='background-color: #e3f2fd; padding: 20px; text-align: center; border-radius: 5px; margin: 20px 0;'>"
                    + "<span style='font-size: 32px; font-weight: bold; color: #1976D2; letter-spacing: 5px;'>" + otp + "</span>"
                    + "</div>"
                    + "<p style='font-size: 14px; color: #666;'>"
                    + "‚è∞ M√£ OTP n√†y c√≥ hi·ªáu l·ª±c trong <strong>5 ph√∫t</strong>."
                    + "</p>"
                    + "<p style='font-size: 14px; color: #666;'>"
                    + "‚ö†Ô∏è N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒëƒÉng k√Ω t√†i kho·∫£n, vui l√≤ng b·ªè qua email n√†y."
                    + "</p>"
                    + "<hr style='border: none; border-top: 1px solid #eee; margin: 20px 0;'>"
                    + "<p style='font-size: 12px; color: #999; text-align: center;'>"
                    + "¬© 2025 EV Battery Swap System. All rights reserved."
                    + "</p>"
                    + "</div>"
                    + "</div>"
                    + "</body>"
                    + "</html>";
            
            message.setContent(emailContent, "text/html; charset=UTF-8");
            message.saveChanges();
            
            System.out.println("[EmailService] üìß Message created successfully");
            System.out.println("[EmailService] üöÄ Sending email...");

            Transport.send(message);

            System.out.println("[EmailService] ========================================");
            System.out.println("[EmailService] ‚úÖ‚úÖ‚úÖ REGISTRATION OTP EMAIL SENT! ‚úÖ‚úÖ‚úÖ");
            System.out.println("[EmailService] ========================================");
            System.out.println("[EmailService] Recipient: " + toEmail);
            System.out.println("[EmailService] OTP: " + otp);
            System.out.println("[EmailService] ========================================\n");
            
            return true;

        } catch (Exception e) {
            System.err.println("\n[EmailService] ========================================");
            System.err.println("[EmailService] ‚ùå‚ùå‚ùå EMAIL SENDING FAILED! ‚ùå‚ùå‚ùå");
            System.err.println("[EmailService] ========================================");
            System.err.println("[EmailService] Error Type: " + e.getClass().getSimpleName());
            System.err.println("[EmailService] Error Message: " + e.getMessage());
            System.err.println("[EmailService] ========================================\n");
            e.printStackTrace();
            return false;
        }
    }

    /**
     * T·∫°o m√£ OTP ng·∫´u nhi√™n 6 ch·ªØ s·ªë
     * @return OTP string (6 digits)
     */
    public static String generateOtp() {
        int otp = 100000 + (int) (Math.random() * 900000);
        return String.valueOf(otp);
    }
}
