package controller;

import DAO.VehicleDAO;
import DAO.UsersDAO;
import DTO.Vehicle;
import com.google.gson.Gson;
import com.google.gson.JsonObject;

import javax.servlet.ServletException;
import javax.servlet.annotation.MultipartConfig;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.*;
import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.text.Normalizer;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@WebServlet("/api/secure/linkVehicle")
@MultipartConfig(maxFileSize = 5 * 1024 * 1024)
public class linkVehicleController extends HttpServlet {

    private static final String API_KEY = "K87030538488957";
    private static final String OCR_URL = "https://api.ocr.space/parse/image";

    private static final List<String> VALID_MODELS = Arrays.asList(
            "Gogoro SuperSport",
            "Gogoro 2 Delight",
            "Gogoro Viva Mix",
            "Gogoro CrossOver S",
            "Gogoro S2 ABS"
    );

    // ‚úÖ Th√™m preflight cho OPTIONS request
    @Override
    protected void doOptions(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        setCorsHeaders(resp, req);
        resp.setStatus(HttpServletResponse.SC_NO_CONTENT); // 204
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {

        // ‚úÖ G·ªçi setCorsHeaders ƒë·ªÉ cho ph√©p FE 5173 / ngrok
        setCorsHeaders(resp, req);

        resp.setContentType("application/json;charset=UTF-8");
        try (PrintWriter out = resp.getWriter()) {
            Gson gson = new Gson();
            Map<String, Object> result = new HashMap<>();
            try {
                // === 1Ô∏è‚É£ L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ JWT filter ===
                Object idAttr = req.getAttribute("jwt_id");
                Object roleAttr = req.getAttribute("jwt_role");

                if (idAttr == null || roleAttr == null) {
                    resp.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
                    result.put("status", "error");
                    result.put("message", "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ch∆∞a ƒëƒÉng nh·∫≠p!");
                    out.print(gson.toJson(result));
                    return;
                }

                int userId = Integer.parseInt(idAttr.toString());
                String role = roleAttr.toString();

                if (!role.equalsIgnoreCase("Driver")) {
                    resp.setStatus(HttpServletResponse.SC_FORBIDDEN);
                    result.put("status", "error");
                    result.put("message", "Ch·ªâ t√†i x·∫ø (Driver) m·ªõi c√≥ quy·ªÅn li√™n k·∫øt xe!");
                    out.print(gson.toJson(result));
                    return;
                }

                // === 2Ô∏è‚É£ L·∫•y file ·∫£nh upload ===
                Part filePart = req.getPart("carDoc");
                if (filePart == null || filePart.getSize() == 0) {
                    result.put("status", "error");
                    result.put("message", "Vui l√≤ng t·∫£i l√™n ·∫£nh c√† v·∫πt xe!");
                    out.print(gson.toJson(result));
                    return;
                }

                // === 3Ô∏è‚É£ G·ªçi API OCR.space ƒë·ªÉ ƒë·ªçc text t·ª´ ·∫£nh ===
                String ocrText = callOcrApi(filePart);
                System.out.println("üîπ [OCR] Full text:\n" + ocrText);
                
                if (ocrText == null || ocrText.trim().isEmpty()) {
                    result.put("status", "error");
                    result.put("message", "OCR th·∫•t b·∫°i ho·∫∑c kh√¥ng ƒë·ªçc ƒë∆∞·ª£c th√¥ng tin!");
                    out.print(gson.toJson(result));
                    return;
                }

                // === 4Ô∏è‚É£ Tr√≠ch xu·∫•t th√¥ng tin c·∫ßn thi·∫øt t·ª´ OCR text ===
                String vin = extractVin(ocrText);
                String licensePlate = extractLicensePlate(ocrText);
                String owner = extractOwner(ocrText);
                String detectedModel = extractModel(ocrText);

                System.out.println("üîπ [EXTRACT] VIN: " + vin);
                System.out.println("üîπ [EXTRACT] License Plate: " + licensePlate);
                System.out.println("üîπ [EXTRACT] Owner from OCR: '" + owner + "'");
                System.out.println("üîπ [EXTRACT] Model: " + detectedModel);

                VehicleDAO vehicleDao = new VehicleDAO();
                UsersDAO userDao = new UsersDAO();

                // === 5Ô∏è‚É£ Ki·ªÉm tra ch·ªß xe tr√πng t√™n t√†i kho·∫£n ƒëƒÉng nh·∫≠p ===
                String usernameInDB = userDao.getUsernameById(userId);
                System.out.println("üîπ [DB] Username from DB: '" + usernameInDB + "'");
                
                if (owner != null && !owner.equals("Kh√¥ng x√°c ƒë·ªãnh")) {
                    String normalizedOwner = normalizeVietnamese(owner);
                    String normalizedUsername = normalizeVietnamese(usernameInDB);
                    
                    System.out.println("üîπ [COMPARE] Normalized Owner: '" + normalizedOwner + "'");
                    System.out.println("üîπ [COMPARE] Normalized Username: '" + normalizedUsername + "'");
                    
                    if (!normalizedOwner.equalsIgnoreCase(normalizedUsername)) {
                        resp.setStatus(HttpServletResponse.SC_FORBIDDEN);
                        result.put("status", "error");
                        result.put("message", "T√™n ch·ªß xe trong gi·∫•y t·ªù kh√¥ng kh·ªõp v·ªõi ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p!");
                        
                        Map<String, String> debugInfo = new HashMap<>();
                        debugInfo.put("ownerFromOCR", owner);
                        debugInfo.put("usernameFromDB", usernameInDB);
                        debugInfo.put("normalizedOwner", normalizedOwner);
                        debugInfo.put("normalizedUsername", normalizedUsername);
                        result.put("debug", debugInfo);
                        
                        out.print(gson.toJson(result));
                        return;
                    }
                } else {
                    System.out.println("‚ö†Ô∏è [OWNER] OCR kh√¥ng ƒë·ªçc ƒë∆∞·ª£c t√™n, b·ªè qua ki·ªÉm tra t√™n ch·ªß xe");
                }

                // === 6Ô∏è‚É£ Ki·ªÉm tra model xe c√≥ h·ª£p l·ªá trong h·ªá th·ªëng kh√¥ng ===
                boolean validModel = VALID_MODELS.stream()
                        .anyMatch(m -> m.equalsIgnoreCase(detectedModel));
                if (!validModel) {
                    resp.setStatus(HttpServletResponse.SC_BAD_REQUEST);
                    result.put("status", "error");
                    result.put("message", "Model xe kh√¥ng h·ª£p l·ªá! H·ªá th·ªëng ch·ªâ h·ªó tr·ª£ xe Gogoro.");
                    out.print(gson.toJson(result));
                    return;
                }

                // === 7Ô∏è‚É£ L·∫•y model_id t·ª´ DB ===
                Integer modelId = vehicleDao.getModelIdByName(detectedModel);
                if (modelId == null) {
                    resp.setStatus(HttpServletResponse.SC_BAD_REQUEST);
                    result.put("status", "error");
                    result.put("message", "Kh√¥ng t√¨m th·∫•y model trong c∆° s·ªü d·ªØ li·ªáu!");
                    out.print(gson.toJson(result));
                    return;
                }

                // === 8Ô∏è‚É£ T·∫°o ƒë·ªëi t∆∞·ª£ng Vehicle v√† l∆∞u DB ===
                Vehicle vehicle = new Vehicle();
                vehicle.setUser_ID(userId);
                vehicle.setModel_ID(modelId);
                vehicle.setVin(vin);
                vehicle.setLicense_Plate(licensePlate);

                boolean success = vehicleDao.insertVehicle(vehicle);

                if (success) {
                    Vehicle inserted = vehicleDao.getVehicleByUserId(userId);
                    result.put("status", "success");
                    result.put("message", "Xe ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω th√†nh c√¥ng!");
                    result.put("data", inserted);
                    result.put("owner", owner);
                    result.put("detectedModel", detectedModel);
                } else {
                    resp.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
                    result.put("status", "error");
                    result.put("message", "Kh√¥ng th·ªÉ l∆∞u th√¥ng tin xe v√†o c∆° s·ªü d·ªØ li·ªáu!");
                }

            } catch (Exception e) {
                e.printStackTrace();
                resp.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
                result.put("status", "error");
                result.put("message", "L·ªói h·ªá th·ªëng: " + e.getMessage());
            }

            out.print(gson.toJson(result));
            out.flush();
        }
    }

    // ‚úÖ Th√™m h√†m setCorsHeaders
    private void setCorsHeaders(HttpServletResponse res, HttpServletRequest req) {
        String origin = req.getHeader("Origin");

        boolean allowed = origin != null && (
                origin.equals("http://localhost:5173")
                || origin.equals("http://127.0.0.1:5173")
                || origin.contains("ngrok-free.app") // h·ªó tr·ª£ khi FE deploy t·∫°m qua ngrok
        );

        if (allowed) {
            res.setHeader("Access-Control-Allow-Origin", origin);
        } else {
            res.setHeader("Access-Control-Allow-Origin", "null");
        }

        res.setHeader("Vary", "Origin");
        res.setHeader("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE, OPTIONS");
        res.setHeader("Access-Control-Allow-Headers",
                "Content-Type, Authorization, ngrok-skip-browser-warning, X-Requested-With, Accept");
        res.setHeader("Access-Control-Expose-Headers", "Authorization, Location");
        res.setHeader("Access-Control-Max-Age", "86400"); // cache preflight 24h
    }

    // === üßπ CHU·∫®N H√ìA T√äN TI·∫æNG VI·ªÜT ===
    private String normalizeVietnamese(String text) {
        if (text == null) return "";
        text = text.replaceAll("[\\s\\u00A0\\u1680\\u2000-\\u200B\\u202F\\u205F\\u3000]+", " ");
        text = text.trim();
        String normalized = Normalizer.normalize(text, Normalizer.Form.NFD);
        normalized = normalized.replaceAll("\\p{M}", "");
        normalized = normalized.replaceAll("[^a-z\\s]", "");
        normalized = normalized.trim().replaceAll("\\s+", "");
        return normalized.toLowerCase();
    }

    // === üß† G·ªçi OCR API ===
    private String callOcrApi(Part filePart) throws Exception {
        HttpURLConnection conn = (HttpURLConnection) new URL(OCR_URL).openConnection();
        conn.setRequestMethod("POST");
        conn.setRequestProperty("apikey", API_KEY);
        conn.setDoOutput(true);

        String boundary = "----WebKitFormBoundary" + System.currentTimeMillis();
        conn.setRequestProperty("Content-Type", "multipart/form-data; boundary=" + boundary);

        OutputStream outputStream = conn.getOutputStream();
        try (PrintWriter writer = new PrintWriter(new OutputStreamWriter(outputStream, "UTF-8"), true)) {
            String fileName = filePart.getSubmittedFileName();
            writer.append("--" + boundary).append("\r\n");
            writer.append("Content-Disposition: form-data; name=\"file\"; filename=\"" + fileName + "\"\r\n");
            writer.append("Content-Type: " + filePart.getContentType() + "\r\n\r\n");
            writer.flush();
            try (InputStream inputStream = filePart.getInputStream()) {
                byte[] buffer = new byte[4096];
                int bytesRead;
                while ((bytesRead = inputStream.read(buffer)) != -1) {
                    outputStream.write(buffer, 0, bytesRead);
                }
                outputStream.flush();
            }
            writer.append("\r\n").flush();
            writer.append("--" + boundary + "--").append("\r\n");
        }

        BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream(), "UTF-8"));
        StringBuilder apiResponse = new StringBuilder();
        String line;
        while ((line = in.readLine()) != null) {
            apiResponse.append(line);
        }
        in.close();

        JsonObject json = com.google.gson.JsonParser.parseString(apiResponse.toString()).getAsJsonObject();
        if (json.has("OCRExitCode") && json.get("OCRExitCode").getAsInt() == 1) {
            return json.getAsJsonArray("ParsedResults")
                    .get(0).getAsJsonObject()
                    .get("ParsedText").getAsString();
        }
        return null;
    }

    // === üîç H√†m t√°ch th√¥ng tin t·ª´ OCR text ===
    private String extractVin(String text) {
        Pattern vinPattern1 = Pattern.compile("(?i)(Frame/VIN|S[o6] khung)[:\\s]+([A-HJ-NPR-Z0-9]{10,17})");
        Matcher m1 = vinPattern1.matcher(text);
        if (m1.find()) {
            return m1.group(2).trim();
        }
        Pattern vinPattern2 = Pattern.compile("\\b[A-HJ-NPR-Z0-9]{17}\\b");
        Matcher m2 = vinPattern2.matcher(text);
        if (m2.find()) {
            return m2.group();
        }
        return "VIN" + System.currentTimeMillis();
    }

    private String extractLicensePlate(String text) {
        Pattern platePattern1 = Pattern.compile("(?i)(Bien.*?so|License Plate)[:\\s]+([0-9]{2}[A-Z]{1,2}[\\-\\s]?[0-9]{5,6})");
        Matcher m1 = platePattern1.matcher(text);
        if (m1.find()) {
            return m1.group(2).replaceAll("[\\s\\-]", "");
        }
        Matcher m2 = Pattern.compile("\\b([0-9]{2}[A-Z]{1,2}[\\-]?[0-9]{5,6})\\b").matcher(text);
        if (m2.find()) return m2.group(1).replaceAll("-", "");
        return "AUTO" + ((int) (Math.random() * 100000));
    }

    private String extractOwner(String text) {
        Pattern p = Pattern.compile("(?i)(Chu xe|Owner)[:\\s]+([A-Z√Ä-·ª∏][A-Z√Ä-·ª∏a-z√†-·ªπ\\s]{2,50})");
        Matcher m = p.matcher(text);
        if (m.find()) return m.group(2).trim();
        return "Kh√¥ng x√°c ƒë·ªãnh";
    }

    private String extractModel(String text) {
        for (String model : VALID_MODELS) {
            if (text.toLowerCase().contains(model.toLowerCase())) return model;
        }
        return null;
    }
}
