import React, { useState, useRef, useEffect } from 'react';
import './LoginModal.css';

/**
 * ForgotPasswordModal - Component x·ª≠ l√Ω qu√™n m·∫≠t kh·∫©u
 * Flow: Nh·∫≠p Email ‚Üí Nh·∫≠p OTP ‚Üí ƒê·ªïi m·∫≠t kh·∫©u m·ªõi ‚Üí Quay v·ªÅ Login
 */
export default function ForgotPasswordModal({ isOpen, onClose, onSuccess }) {
  const modalRef = useRef();
  const [step, setStep] = useState(1); // 1: Email, 2: OTP, 3: New Password
  const [email, setEmail] = useState('');
  const [otp, setOtp] = useState('');
  const [newPassword, setNewPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [error, setError] = useState(null);
  const [message, setMessage] = useState(null);
  const [isLoading, setIsLoading] = useState(false);

  const API_BASE_URL = 'http://localhost:8080/webAPI';

  // Reset khi ƒë√≥ng modal
  useEffect(() => {
    if (!isOpen) {
      setStep(1);
      setEmail('');
      setOtp('');
      setNewPassword('');
      setConfirmPassword('');
      setError(null);
      setMessage(null);
    }
  }, [isOpen]);

  // ƒê√≥ng modal khi click backdrop
  useEffect(() => {
    if (!isOpen) return;

    const handleClickOutside = (event) => {
      if (modalRef.current && !modalRef.current.contains(event.target)) {
        onClose();
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isOpen, onClose]);

  if (!isOpen) return null;

  // STEP 1: G·ª≠i OTP qua email
  const handleSendOtp = async (e) => {
    e.preventDefault();
    setError(null);
    setMessage(null);
    setIsLoading(true);

    try {
      const response = await fetch(`${API_BASE_URL}/api/forgot-password`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email })
      });

      const data = await response.json();

      if (data.status === 'success') {
        setMessage(data.message);
        setTimeout(() => {
          setStep(2); // Chuy·ªÉn sang b∆∞·ªõc nh·∫≠p OTP
          setMessage(null);
        }, 1500);
      } else {
        setError(data.message);
      }
    } catch (err) {
      setError('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng th·ª≠ l·∫°i.');
      console.error('Send OTP error:', err);
    } finally {
      setIsLoading(false);
    }
  };

  // STEP 2: X√°c th·ª±c OTP
  const handleVerifyOtp = async (e) => {
    e.preventDefault();
    setError(null);
    setMessage(null);
    setIsLoading(true);

    try {
      const response = await fetch(`${API_BASE_URL}/api/verify-otp`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, otp })
      });

      const data = await response.json();

      if (data.status === 'success') {
        setMessage('OTP h·ª£p l·ªá! Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u m·ªõi.');
        setTimeout(() => {
          setStep(3); // Chuy·ªÉn sang b∆∞·ªõc ƒë·ªïi m·∫≠t kh·∫©u
          setMessage(null);
        }, 1000);
      } else {
        setError(data.message);
      }
    } catch (err) {
      setError('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng th·ª≠ l·∫°i.');
      console.error('Verify OTP error:', err);
    } finally {
      setIsLoading(false);
    }
  };

  // STEP 3: ƒê·ªïi m·∫≠t kh·∫©u m·ªõi
  const handleResetPassword = async (e) => {
    e.preventDefault();
    setError(null);
    setMessage(null);

    // Ki·ªÉm tra m·∫≠t kh·∫©u tr√πng kh·ªõp
    if (newPassword !== confirmPassword) {
      setError('M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp');
      return;
    }

    if (newPassword.length < 6) {
      setError('M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±');
      return;
    }

    setIsLoading(true);

    try {
      const response = await fetch(`${API_BASE_URL}/api/reset-password`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, otp, newPassword })
      });

      const data = await response.json();

      if (data.status === 'success') {
        setMessage('ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng! ƒêang chuy·ªÉn v·ªÅ trang ƒëƒÉng nh·∫≠p...');
        setTimeout(() => {
          onSuccess(); // Quay v·ªÅ trang login
          onClose();
        }, 2000);
      } else {
        setError(data.message);
      }
    } catch (err) {
      setError('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng th·ª≠ l·∫°i.');
      console.error('Reset password error:', err);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="modal-backdrop">
      <div className="login-modal" ref={modalRef}>
        <button className="close-btn" onClick={onClose} aria-label="ƒê√≥ng">
          &times;
        </button>

        {/* STEP 1: Nh·∫≠p Email */}
        {step === 1 && (
          <>
            <h2 className="modal-title">üîê Qu√™n m·∫≠t kh·∫©u?</h2>
            <p className="modal-subtitle">Nh·∫≠p email c·ªßa b·∫°n ƒë·ªÉ nh·∫≠n m√£ OTP</p>
            <form className="login-form" onSubmit={handleSendOtp}>
              <div className="form-group">
                <label htmlFor="forgot-email">Email</label>
                <input
                  type="email"
                  id="forgot-email"
                  placeholder="Nh·∫≠p email ƒë√£ ƒëƒÉng k√Ω"
                  required
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                />
              </div>
              {error && <p className="error-message">{error}</p>}
              {message && <p className="success-message">{message}</p>}
              <button type="submit" className="login-button" disabled={isLoading}>
                {isLoading ? 'ƒêang g·ª≠i...' : 'G·ª≠i m√£ OTP'}
              </button>
              <p className="signup-link">
                Nh·ªõ m·∫≠t kh·∫©u?{' '}
                <a href="#" onClick={(e) => { e.preventDefault(); onClose(); }}>
                  ƒêƒÉng nh·∫≠p
                </a>
              </p>
            </form>
          </>
        )}

        {/* STEP 2: Nh·∫≠p OTP */}
        {step === 2 && (
          <>
            <h2 className="modal-title">‚úâÔ∏è X√°c th·ª±c OTP</h2>
            <p className="modal-subtitle">
              M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn <strong>{email}</strong>
            </p>
            <form className="login-form" onSubmit={handleVerifyOtp}>
              <div className="form-group">
                <label htmlFor="otp-input">M√£ OTP (6 ch·ªØ s·ªë)</label>
                <input
                  type="text"
                  id="otp-input"
                  placeholder="Nh·∫≠p m√£ OTP"
                  required
                  maxLength="6"
                  pattern="\d{6}"
                  value={otp}
                  onChange={(e) => setOtp(e.target.value.replace(/\D/g, ''))}
                  style={{ fontSize: '24px', textAlign: 'center', letterSpacing: '8px' }}
                />
              </div>
              {error && <p className="error-message">{error}</p>}
              {message && <p className="success-message">{message}</p>}
              <button type="submit" className="login-button" disabled={isLoading}>
                {isLoading ? 'ƒêang x√°c th·ª±c...' : 'X√°c th·ª±c OTP'}
              </button>
              <p className="signup-link">
                Kh√¥ng nh·∫≠n ƒë∆∞·ª£c m√£?{' '}
                <a href="#" onClick={(e) => { e.preventDefault(); setStep(1); setOtp(''); }}>
                  G·ª≠i l·∫°i
                </a>
              </p>
            </form>
          </>
        )}

        {/* STEP 3: ƒê·ªïi m·∫≠t kh·∫©u m·ªõi */}
        {step === 3 && (
          <>
            <h2 className="modal-title">üîë ƒê·∫∑t m·∫≠t kh·∫©u m·ªõi</h2>
            <p className="modal-subtitle">Nh·∫≠p m·∫≠t kh·∫©u m·ªõi cho t√†i kho·∫£n c·ªßa b·∫°n</p>
            <form className="login-form" onSubmit={handleResetPassword}>
              <div className="form-group">
                <label htmlFor="new-password">M·∫≠t kh·∫©u m·ªõi</label>
                <input
                  type="password"
                  id="new-password"
                  placeholder="Nh·∫≠p m·∫≠t kh·∫©u m·ªõi"
                  required
                  minLength="6"
                  value={newPassword}
                  onChange={(e) => setNewPassword(e.target.value)}
                />
              </div>
              <div className="form-group">
                <label htmlFor="confirm-password">X√°c nh·∫≠n m·∫≠t kh·∫©u</label>
                <input
                  type="password"
                  id="confirm-password"
                  placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u m·ªõi"
                  required
                  minLength="6"
                  value={confirmPassword}
                  onChange={(e) => setConfirmPassword(e.target.value)}
                />
              </div>
              {error && <p className="error-message">{error}</p>}
              {message && <p className="success-message">{message}</p>}
              <button type="submit" className="login-button" disabled={isLoading}>
                {isLoading ? 'ƒêang c·∫≠p nh·∫≠t...' : 'ƒê·ªïi m·∫≠t kh·∫©u'}
              </button>
            </form>
          </>
        )}
      </div>
    </div>
  );
}
